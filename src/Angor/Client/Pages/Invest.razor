@page "/invest/{ProjectId}"
@using Angor.Shared
@using Angor.Client.Storage

@inherits BaseComponent

@inject HttpClient Http
@inject IDerivationOperations _derivationOperations
@inject IWalletStorage _walletStorage;
@inject IClientStorage storage;
@inject NavigationManager NavigationManager
@inject IWalletOperations _WalletOperations
@inject INetworkConfiguration _NetworkConfiguration

@if (!hasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}

<div class="container py-3">
    <h2 class="mb-4">Investment Page</h2>
    <p>Here is a small explanation of the project. You can <a href="/project">view more details about the project here</a>.</p>
    
    <NotificationComponent @ref="notificationComponent"/>

    <div class="card">
        <div class="card-body">
            <form>
                <div class="form-group">
                    <label for="investmentAmount">Investment Amount</label>
                    <input type="number" class="form-control" id="investmentAmount" @bind="InvestmentAmount">
                </div>

                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="isSeeder" @bind="IsSeeder" disabled="@IsSeederTimePassed">
                    <label class="form-check-label" for="isSeeder">
                        Do you want to invest as a Seeder?
                    </label>
                </div>

                @if (IsSeeder)
                {
                    <div class="alert alert-info mt-2">
                        <strong>Seeder Requirements:</strong> Here are the requirements for a Seeder...
                    </div>
                }

                <button type="submit" class="btn btn-primary mt-3" @onclick="InvestFunds">Invest</button>
            </form>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string ProjectId { get; set; }

    private decimal InvestmentAmount { get; set; }
    private bool IsSeeder { get; set; }
    private bool IsSeederTimePassed { get; set; }
    //private bool hasWallet;

    //private NotificationComponent notificationComponent;

    // Assume a method to determine whether seeder time has passed
    protected override async Task OnInitializedAsync()
    {
      //  hasWallet = _walletStorage.HasWallet();
        
        if (hasWallet)
        {
            IsSeederTimePassed = await CheckIfSeederTimeHasPassed();
        }
    }

    private Task<bool> CheckIfSeederTimeHasPassed()
    {
        // Implement your logic to check whether the seeder time has passed.
        // For now, I'm returning a dummy value.
        return Task.FromResult(false);
    }

    private void InvestFunds()
    {
        // Implement your investment logic here.
    }
}
