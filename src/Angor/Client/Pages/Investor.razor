@page "/investor"
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Blockcore.NBitcoin
@using Angor.Client.Models
@using Angor.Shared
@using Angor.Shared
@using Angor.Shared.Services
@using Nostr.Client.Messages
@using System.Text.Json
@using Nostr.Client.Messages
@using System.Text.Json
@using Blockcore.NBitcoin.DataEncoders
@using Nostr.Client.Keys

@inject ILogger<Investor> Logger
@inject IClientStorage storage
@inject NavigationManager NavigationManager
@inject IWalletStorage _walletStorage
@inject ICacheStorage SessionStorage
@inject IIndexerService _IndexerService
@inject ISignService SignService
@inject IRelayService RelayService
@inject IDerivationOperations DerivationOperations

@inherits BaseComponent

@if (!hasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center">
        <h1 class="mb-4">Invested Portfolio</h1>
        <button class="btn btn-primary" @onclick="ScanForInvestedProjectsAsync">Scan for my projects</button>
        <button class="btn btn-secondary" @onclick="NavigateToPenalties">View Penalties</button>
    </div>    
    <NotificationComponent @ref="notificationComponent"/>
    
    <!-- Summary Statistics -->
    <div class="row row-cols-1 row-cols-md-4 g-4 mb-4">
        <div class="col">
            <div class="card text-white bg-primary">
                <div class="card-body">
                    <h5 class="card-title">Funded Projects</h5>
                    <p class="card-text">@TotalFundedProjects</p>
                </div>
            </div>
        </div>
        <div class="col">
            <div class="card text-white bg-success">
                <div class="card-body">
                    <h5 class="card-title">Total invested</h5>
                    <p class="card-text"> @Money.Satoshis(TotalInvested).ToUnit(MoneyUnit.BTC) @network.CoinTicker</p>
                </div>
            </div>
        </div>
        <div class="col">
            <div class="card text-white bg-info">
                <div class="card-body">
                    <h5 class="card-title">Wallet</h5>
                    <p class="card-text">@Money.Satoshis(TotalWallet).ToUnit(MoneyUnit.BTC) @network.CoinTicker</p>
                </div>
            </div>
        </div>
        <div class="col">
            <div class="card text-white bg-secondary">
                <div class="card-body">
                    <h5 class="card-title">In Recovery</h5>
                    <p class="card-text">@Money.Satoshis(TotalInRecovery).ToUnit(MoneyUnit.BTC) @network.CoinTicker</p>
                </div>
            </div>
        </div>
    </div>

    <!-- List of Projects -->
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header pb-0 p-3">
                    <div class="row">
                        <div class="col-6 d-flex align-items-center">
                            <h6 class="mb-0">Your Projects</h6>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-xxs font-weight-bolder opacity-7"></th>
                                    <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Name</th>
                                    <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Funding Target (@network.CoinTicker)</th>
                                    <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Raised (@network.CoinTicker)</th>
                                    <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Raised  (% Target)</th>
                                    <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Project Status</th>
                                    <th class="text-uppercase text-xxs font-weight-bolder opacity-7">My Investment (@network.CoinTicker)</th>
                                    <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Spent by Founder</th>
                                    <th class="text-uppercase text-xxs font-weight-bolder opacity-7">Available to Founder</th>
                                    <th class="text-uppercase text-xxs font-weight-bolder opacity-7">In Recovery</th>
                                </tr>
                            </thead>
                            <tbody>

                                @foreach (var project in projects)
                                {
                                    Stats.TryGetValue(project.ProjectInfo.ProjectIdentifier, out var stats);

                                    <tr>
                                        <td>
                                             <a href=@($"/view/{project.ProjectInfo.ProjectIdentifier}")>@project.Metadata?.Name</a>
                                        </td>
                                        <td>@project.ProjectInfo.TargetAmount @network.CoinTicker</td>
                                        <td>@Money.Satoshis(stats?.AmountInvested ?? 0).ToUnit(MoneyUnit.BTC) @network.CoinTicker </td>
                                        <td>@((stats?.AmountInvested ?? 0) * 100 / Money.Coins(project.ProjectInfo.TargetAmount).Satoshi) %</td>
                                        <td>
                                            @if (project.ProjectInfo.StartDate < DateTime.UtcNow)
                                            {
                                                <p class="text-info">Funding</p>
                                            }
                                            else
                                            {
                                                <p class="text-success">Live</p>
                                            }
                                        </td>
                                        <td>
                                            @Money.Satoshis(project.AmountInvested ?? 0).ToUnit(MoneyUnit.BTC) @network.CoinTicker
                                            @if (!project.SignaturesInfo?.Signatures.Any() ?? false)
                                            {
                                                <a href=@($"/invest/{project.ProjectInfo.ProjectIdentifier}") class="btn btn-link" data-toggle="tooltip" title="Pending"> <i class="oi oi-clock"></i></a>
                                            }
                                        </td>
                                        <td>-</td>
                                        <td>-</td>
                                        <td>@Money.Satoshis(project.AmountInRecovery ?? 0).ToUnit(MoneyUnit.BTC) @network.CoinTicker</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

    </div>

</div>
@code {

    private List<InvestorProject> projects = new();

    long TotalInvested = 0;
    long TotalWallet = 0;
    int TotalFundedProjects = 0;
    long TotalInRecovery = 0;

    public Dictionary<string, ProjectStats> Stats = new();
    
    Dictionary<string,ScannedProjectData> scannedProject = new ();
    scanStage? _scanStage;
    
    protected override async Task OnInitializedAsync()
    {
        hasWallet = _walletStorage.HasWallet();

        if (hasWallet)
        {
            var accountInfo = storage.GetAccountInfo(network.Name);
            var unconfirmedInfo = SessionStorage.GetUnconfirmedInboundFunds();

            projects = storage.GetInvestmentProjects();

            var abi = new AccountBalanceInfo();
            abi.UpdateAccountBalanceInfo(accountInfo, unconfirmedInfo);

            TotalFundedProjects = projects.Count;
            TotalInvested = projects.Sum(s => s.AmountInvested ?? 0);
            TotalWallet = abi.TotalBalance;
            TotalInRecovery = projects.Sum(s => s.AmountInRecovery ?? 0);

            return RefreshBalance();
        }
        return Task.CompletedTask;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_scanStage == scanStage.ProjectDataLookup)
            {
                RelayService.RequestProjectCreateEventsByPubKey(x =>
                {
                    var investorProject = scannedProject.FirstOrDefault(p => p.Value.FounderNostrKey == x.Pubkey).Value;
                    
                    if (investorProject == null)
                    {
                        Logger.LogError(x.Pubkey + "was not found in the scanned project list");
                        return;
                    }

                    investorProject.Project ??= new InvestorProject();

                    switch (x.Kind)
                    {
                        case NostrKind.Metadata:
                            investorProject.Project.Metadata ??=
                                JsonSerializer.Deserialize<ProjectMetadata>(x.Content!, Angor.Shared.Services.RelayService.settings);
                            break;
                        case NostrKind.ApplicationSpecificData:
                            if (investorProject.Project.ProjectInfo == null)
                                investorProject.Project.ProjectInfo = JsonSerializer.Deserialize<ProjectInfo>(x.Content!, Angor.Shared.Services.RelayService.settings) ?? throw new Exception("The project info must be in the application specific data event");
                            break;
                        default:
                            throw new ArgumentOutOfRangeException($"{x.Kind}");
                    }
                },
                    () =>
                    {
                        _scanStage = scanStage.InvestmentBlockchainLookup;
                        StateHasChanged();
                    },
                    scannedProject.Values.Select(x => x.FounderNostrKey).ToArray());
            }

            if (_scanStage == scanStage.InvestmentBlockchainLookup)
            {
                foreach (var (nostrPubKey, scannedProjectData) in scannedProject)
                {

                    var investorKey = DerivationOperations.DeriveInvestorKey(_walletStorage.GetWallet().WalletWords, 
                        scannedProjectData.Project!.ProjectInfo.FounderKey ?? throw new Exception("Did not get the application specific data"));

                    var result = await _IndexerService.GetProjectInvestmentsAsync(scannedProjectData.Project!.ProjectInfo.ProjectIdentifier, investorKey);

                    if (result != null)
                    {
                        scannedProjectData.Project.TransactionId = result.TransactionId;
                        scannedProjectData.Project.AmountInvested = result?.TotalAmount;
                        //TODO set the seeder when we implement the seeder logic in the UI    
                    }
                    
                    SignService.LookupSignatureForInvestmentRequest(nostrPubKey, scannedProjectData.Project.ProjectInfo.NostrPubKey,
                        scannedProjectData.RequestEventCreateAt, scannedProjectData.RequestEventId,
                        s =>
                        {
                            //TODO decrypt the signatures and add to project
                            Logger.LogInformation("Received encrypted founder signatures" + s);
                            
                            var accountInfo = storage.GetAccountInfo(network.Name);
                            var unconfirmedInfo = SessionStorage.GetUnconfirmedInboundFunds();
                            
                            projects = storage.GetInvestmentProjects();

                            var abi = new AccountBalanceInfo();
                            abi.UpdateAccountBalanceInfo(accountInfo, unconfirmedInfo);

                            TotalFundedProjects = projects.Count;
                            TotalInvested =  projects.Sum(s => s.AmountInvested ?? 0);
                            TotalWallet = abi.TotalBalance;
                            TotalInRecovery = projects.Sum(s => s.AmountInRecovery ?? 0);

                            StateHasChanged();
                            return RefreshBalance();;
                        });
                }
                
                foreach (var scannedProjectData in scannedProject.Values.Where(x => x.Project != null))
                {
                    storage.AddInvestmentProject(scannedProjectData.Project);
                }
                
                _scanStage = null;
                StateHasChanged();
            }
    }

    private async Task RefreshBalance()
    {
        try
        {
            Stats.Clear();
            
            foreach (var project in projects)
            {
                var projectStats = await _IndexerService.GetProjectStatsAsync(project.ProjectInfo.ProjectIdentifier);
                Stats.Add(project.ProjectInfo.ProjectIdentifier, projectStats);
            }
        }
        catch (Exception ex)
        {
            notificationComponent.ShowErrorMessage(ex.Message);
        }
    }

    public string TrimString(string input)
    {
        if (input.Length > 20)
        {
            return input.Substring(0, 10) + "..." + input.Substring(input.Length - 10);
        }

        return input;
    }

    private void NavigateToPenalties()
    {
        NavigationManager.NavigateTo("/penalties");
    }

    private async Task ScanForInvestedProjectsAsync()
    {
        _scanStage = scanStage.NostrDMLookup;
        InvestmentRequestLookup();
    }

    private void InvestmentRequestLookup()
    {
        var countPreLookup = scannedProject.Count == 0 ? projects.Count : scannedProject.Count;

    // foreach (var i in Enumerable.Range(1, 5))
    // {
        var key = DerivationOperations.DeriveProjectNostrPrivateKey(_walletStorage.GetWallet().WalletWords, countPreLookup + 1);

        var hexKey = Encoders.Hex.EncodeData(key.ToBytes());

        var nostrInvestorPubKey = NostrPrivateKey.FromHex(hexKey).DerivePublicKey().Hex;
        
        scannedProject.Add(nostrInvestorPubKey, new ScannedProjectData { Index = countPreLookup + 1 });
    //}
        
        SignService.LookupInvestmentRequestsSentByInvestorKey(nostrInvestorPubKey,
            (investorNostrPubKey, founderNostrPubKey, createdAt,eventId) =>
            {
                if (scannedProject.ContainsKey(investorNostrPubKey) && !string.IsNullOrEmpty(scannedProject[investorNostrPubKey].FounderNostrKey))
                    return;

                scannedProject[investorNostrPubKey].FounderNostrKey = founderNostrPubKey;
                scannedProject[investorNostrPubKey].RequestEventCreateAt = createdAt;
                scannedProject[investorNostrPubKey].RequestEventId = eventId;
            }, () =>
            {
                if (!string.IsNullOrEmpty(scannedProject[nostrInvestorPubKey].FounderNostrKey))
                {
                    InvestmentRequestLookup();
                }
                else
                {
                    scannedProject.Remove(nostrInvestorPubKey);    
                    _scanStage = scanStage.ProjectDataLookup;
                    StateHasChanged();
                }
            });
    }

    private class ScannedProjectData
    {
        public int Index { get; set; }
        public string FounderNostrKey { get; set; }
        public string RequestEventId { get; set; }
        public DateTime RequestEventCreateAt { get; set; }
        public InvestorProject? Project { get; set; }
    }
    
    private enum scanStage
    {
        NostrDMLookup,
        ProjectDataLookup,
        InvestmentBlockchainLookup
    }
}