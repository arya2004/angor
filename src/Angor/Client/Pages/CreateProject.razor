@page "/create-project"
@using Angor.Shared.Models
@using Angor.Shared
@using Angor.Client.Storage
@using Angor.Shared.Protocol

@inject HttpClient Http
@inject IDerivationOperations _derivationOperations
@inject IWalletStorage _walletStorage;
@inject IClientStorage storage;
@inject NavigationManager NavigationManager
@inject IWalletOperations _WalletOperations
@inject INetworkConfiguration  _NetworkConfiguration

@if (!hasWallet)
{
    <div class="row mt-4">
        <div class="col">
            <div class="alert alert-info" role="alert">No Wallet Found</div>
        </div>
    </div>

    return;
}

<div class="container mt-4">
    <h1 class="mb-4">Create New Project</h1>

    <NotificationComponent @ref="notificationComponent"/>

    <EditForm Model="project" OnValidSubmit="HandleValidSubmit">
        
        <!-- Angor Fee Key -->
        <div class="mb-3">
            <label for="angorFeeKey" class="form-label">Project identifier</label>
            <InputText id="angorFeeKey" @bind-Value="project.ProjectIdentifier" class="form-control" placeholder="Enter angor fee key" readonly />
        </div>

        <!-- Founder Key -->
        <div class="mb-3">
            <label for="founderKey" class="form-label">Founder Key</label>
            <InputText id="founderKey" @bind-Value="project.FounderKey" class="form-control" placeholder="Enter founder key" readonly />
        </div>

        <!-- Start Date -->
        <div class="mb-3">
            <label for="startDate" class="form-label">Start Date</label>
            <InputDate id="startDate" @bind-Value="project.StartDate" class="form-control"/>
        </div>

        <!-- Penalty Date -->
        <div class="mb-3">
            <label for="penaltyDate" class="form-label">Penalty Date</label>
            <InputDate id="penaltyDate" @bind-Value="project.PenaltyDate" class="form-control"/>
        </div>

        <!-- Expiry Date -->
        <div class="mb-3">
            <label for="expiryDate" class="form-label">Expiry Date</label>
            <InputDate id="expiryDate" @bind-Value="project.ExpiryDate" class="form-control"/>
        </div>

        <!-- Target Amount -->
        <div class="mb-3">
            <label for="targetAmount" class="form-label">Target Amount</label>
            <InputNumber id="targetAmount" @bind-Value="project.TargetAmount" class="form-control" placeholder="Enter target amount"/>
        </div>

        <!-- Stages -->
        <h3 class="mb-3">Stages</h3>
        @foreach (var stage in project.Stages)
        {
            <div class="mb-3">
                <label class="form-label">Stage @project.Stages.IndexOf(stage)</label>
                <div class="input-group">
                    <InputNumber @bind-Value="stage.AmountToRelease" class="form-control" placeholder="Enter amount to release as a percentage" min="1" max="100" step="1"/>
                    <InputDate @bind-Value="stage.ReleaseDate" class="form-control"/>
                    <button type="button" class="btn btn-danger" @onclick="() => RemoveStage(stage)">Remove</button>
                </div>
            </div>
        }
        <button type="button" class="btn btn-primary mb-3" @onclick="AddStage">Add Stage</button>

        <!-- Save & Publish Buttons -->
        <div class="mb-3">
            <button type="submit" class="btn btn-success">Save Project</button>
        </div>
    </EditForm>
</div>

@code {

    private NotificationComponent notificationComponent;

    private bool sendConfirmModal;
    private bool hasWallet;

    private string testAngorKey = "tpubD8JfN1evVWPoJmLgVg6Usq2HEW9tLqm6CyECAADnH5tyQosrL6NuhpL9X1cQCbSmndVrgLSGGdbRqLfUbE6cRqUbrHtDJgSyQEY2Uu7WwTL";
    
    private ProjectInfo project = new ProjectInfo
    {
        StartDate = DateTime.UtcNow,
        PenaltyDate = DateTime.UtcNow,
        ExpiryDate = DateTime.UtcNow,
        TargetAmount = 100,
        Stages = new List<Stage>
        {
            new Stage { AmountToRelease = 10, ReleaseDate = DateTime.UtcNow.AddDays(1) },
            new Stage { AmountToRelease = 30, ReleaseDate = DateTime.UtcNow.AddDays(2) },
            new Stage { AmountToRelease = 60, ReleaseDate = DateTime.UtcNow.AddDays(3) },
        }
    };
   
    protected override Task OnInitializedAsync()
    {
        hasWallet = _walletStorage.HasWallet();

        if (hasWallet)
        {
            var myproject = storage.GetFounderProjectsInfo();

            if (myproject != null)
            {
                NavigationManager.NavigateTo($"/view-project/{myproject.ProjectIdentifier}");
            }
            else
            {
                var wallet = _walletStorage.GetWallet();
                
                var founderKey = _derivationOperations.DeriveFounderKey(wallet);
                var projectIdentifier = _derivationOperations.DeriveAngorKey(founderKey, testAngorKey);
                project.FounderKey = founderKey;
                project.ProjectIdentifier = projectIdentifier;
            }

        }
        
        return Task.CompletedTask;
    }


    private async Task HandleValidSubmit()
    {
        if (project.Stages.Count() < 3)
        {
    // Show an error message to the user.
            notificationComponent.ShowErrorMessage("There must be at least 3 stages");
            return;
        }

        if (project.Stages.Sum(s => s.AmountToRelease) != 100)
        {
    // Show an error message to the user.
            notificationComponent.ShowErrorMessage("The stages must sum to 100%");
            return;
        }

        var myproject = storage.GetFounderProjectsInfo();

        if (myproject != null)
        {
            notificationComponent.ShowErrorMessage("This wallet already has a project");
            return;
        }

        var operationResult = await notificationComponent.LongOperation(async () =>
        {

            var sendInfo = new SendInfo();
            var network = _NetworkConfiguration.GetNetwork();
            var accountInfo = storage.GetAccountInfo(network.Name);

            var feeEstimation = await _WalletOperations.GetFeeEstimationAsync();
            var utxoDataWithPaths = _WalletOperations.FindOutputsForTransaction(sendInfo.SendAmountSat, accountInfo);

            var transaction = ProjectOperations.CreateNewProjectTransaction(network, project.FounderKey, _derivationOperations.AngorKeyToScript(project.ProjectIdentifier), 10000);

            var signedTransaction = _WalletOperations.AddInputsAndSignTransaction(network, accountInfo.ChangeAddressesInfo.First().Address, transaction, _walletStorage.GetWallet(), utxoDataWithPaths,
                feeEstimation.First());

            var response = await _WalletOperations.PublishTransactionAsync(network, signedTransaction);

            return new OperationResult { Success = response.Success, Message = response.Message };

        });

        if (operationResult.Success)
        {
            notificationComponent.ShowNotificationMessage("Project created", 1);

            storage.SetFounderProjectInfo(project);
        }
        else
        {
            notificationComponent.ShowErrorMessage(operationResult.Message);
        }
    }

    private void AddStage()
    {
        project.Stages.Add(new Stage { ReleaseDate = DateTime.UtcNow });
    }

    private void RemoveStage(Stage stage)
    {
        project.Stages.Remove(stage);
    }
}
