@page "/view-project/{ProjectId}"
@using Angor.Shared
@using Angor.Client.Storage

@inject HttpClient Http
@inject IDerivationOperations _derivationOperations
@inject IWalletStorage _walletStorage;
@inject IClientStorage storage;

<h3>View Project</h3>

@if (!hasWallet)
{
    <div class="row mt-4">
        <div class="col">
            <div class="alert alert-info" role="alert">No Wallet Found</div>
        </div>
    </div>

    return;
}

<NotificationComponent @ref="notificationComponent"/>

@if (project == null)
{
    <p><em>project not found...</em></p>
}
else
{
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Project Identifier: @project.ProjectIdentifier</h5>
            <p class="card-text">Founder Key: @project.FounderKey</p>
            <p class="card-text">Start Date: @project.StartDate</p>
            <p class="card-text">Penalty Date: @project.PenaltyDate</p>
            <p class="card-text">Expiry Date: @project.ExpiryDate</p>
            <p class="card-text">Target Amount: @project.TargetAmount</p>
            <h5>Stages:</h5>
            @foreach (var stage in project.Stages)
            {
                <hr /> <!-- This adds a horizontal line -->
                <p class="card-text">Amount to Release: @stage.AmountToRelease%</p>
                <p class="card-text">Release Date: @stage.ReleaseDate</p>
                
            }
        </div>
    </div>

}

@code {
    [Parameter]
    public string ProjectId { get; set; }

    private ProjectInfo project;

    private NotificationComponent notificationComponent;

    private bool sendConfirmModal;
    private bool hasWallet;


    protected override Task OnInitializedAsync()
    {
        hasWallet = _walletStorage.HasWallet();

        if (hasWallet)
        {
            var myproject = storage.GetFounderProjectsInfo();

            if (myproject != null && myproject.ProjectIdentifier == ProjectId)
            {
                project = myproject;
            }
            else
            {
                var projects = storage.GetProjectsInfo();

                var found = projects.FirstOrDefault(p => p.ProjectIdentifier == ProjectId);

                if (found != null)
                {
                    project = found;
                }
            }
        }
        
        return Task.CompletedTask;
    }
}