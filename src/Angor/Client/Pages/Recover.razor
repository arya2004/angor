@page "/recover/{ProjectId}"

@using Angor.Shared
@using Angor.Client.Storage
@using Angor.Client.Services
@using Angor.Shared.Models
@using Angor.Shared.ProtocolNew
@using Blockcore.Consensus.TransactionInfo
@using Blockcore.NBitcoin
@using Blockcore.NBitcoin.DataEncoders

@inject HttpClient Http
@inject IClientStorage storage;
@inject IIndexerService _IndexerService
@inject INetworkConfiguration _NetworkConfiguration
@inject IDerivationOperations _derivationOperations
@inject IWalletOperations _WalletOperations
@inject IFounderTransactionActions _founderTransactionActions

@inherits BaseComponent

@if (!hasWallet)
{
    NavigationManager.NavigateTo($"/wallet");
    return;
}

<h3>Recover funds</h3>

<div class="container">

    <NotificationComponent @ref="notificationComponent" />

    <table class="table">
        <thead>
            <tr>
                <th>Transaction Details</th>
                <th>Address</th>
                <th>Status</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in transactions)
            {
                <tr>
                    <td>@transaction.Amount BTC</td>
                    <td>@transaction.OutputAddress</td>
                    <td>
                        @if (transaction.IsSpent)
                        {
                            <span class="text-primary">Spent</span>
                        }
                        else
                        {
                            <span class="text-success">Not Spent</span>
                        }
                    </td>
                    <td>
                        @if (!transaction.IsSpent)
                        {
                            <button class="btn btn-primary" @onclick="() => OpenRecoveryModal(transaction)">Recover Funds</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (showRecoveryModal)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0, 0, 0, 0.5)">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Recovery Confirmation</h5>
                        <button type="button" class="btn-close" @onclick="() => showRecoveryModal = false"></button>
                    </div>
                    <div class="modal-body">
                        <p class="mb-1">Transaction details: @currentTransaction.Amount BTC</p>
                        <p class="mb-1">Address: @currentTransaction.OutputAddress</p>
                        <hr>
                        <p class="mt-3">Are you sure you want to recover these funds?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => showRecoveryModal = false">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="RecoverFunds">Confirm</button>
                    </div>
                </div>
            </div>
        </div>
    }

</div>

@code {
    [Parameter]
    public string ProjectId { get; set; }

    private bool showRecoveryModal = false;
    private Transaction currentTransaction; // Assuming you have a model called Transaction

    // Sample data. Replace with your actual data fetching method.
    private List<Transaction> transactions = new List<Transaction>
    {
        new Transaction { Amount = 1, OutputAddress = "address1", IsSpent = false },
        // Add other sample transactions
    };

    private void OpenRecoveryModal(Transaction transaction)
    {
        currentTransaction = transaction;
        showRecoveryModal = true;
    }

    private void RecoverFunds()
    {
        // Logic to recover funds here

        showRecoveryModal = false;
    }

    // Your Transaction model for the sake of the example
    private class Transaction
    {
        public decimal Amount { get; set; }
        public string OutputAddress { get; set; }
        public bool IsSpent { get; set; }
    }
}
