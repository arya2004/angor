@page "/founder"
@using Angor.Client.Models
@using Angor.Client.Storage
@using Angor.Shared.Models
@using Angor.Shared.Services
@using Blockcore.NBitcoin
@using Nostr.Client.Messages

@inject NavigationManager NavigationManager
@inject IWalletStorage _walletStorage;
@inject IClientStorage storage;
@inject IRelayService RelayService;
@inject IIndexerService _IndexerService
@inject ISerializer serializer

<NotificationComponent @ref="notificationComponent"/>

@if (!hasWallet)
{
    NavigationManager.NavigateTo("/wallet");
    return;
}

<div class="row">
    <div class="card card-body">
        <div class="d-flex align-items-center justify-content-between">
            <div class="d-flex col-auto my-auto align-items-center">
                <span class="user-select-none">
                    <Icon IconName="founder" Height="42" Width="42"/>
                </span>
                <div class="h-100 ms-3">
                    <h5 class="mb-0 font-weight-bolder">
                        Founder
                    </h5>

                </div>
            </div>
            <div class="tooltip-container" data-bs-toggle="tooltip" title="@GetCreateButtonTooltip()">
                <button
                    class="btn btn-border"
                    @onclick="NavigateToCreateProject"
                    disabled="@(scanningForProjects || (founderProjects.Count >= 14) ? true : null)">
                    <i>
                        <Icon IconName="add"></Icon>
                    </i>
                    <span class="nav-link-text ms-1">
                        @(scanningForProjects ? "Scanning..." : "Create Project")
                    </span>
                </button>
            </div>

        </div>
        <p class="mb-0 font-weight-normal text-sm mt-4">
            To create a new project or view your existing projects, an on-chain transaction and a Nostr DID are required.
        </p>
    </div>
</div>

@if (founderProjects.Count == 0)
{
    <div class="row mt-4">
        <div class="card card-body angor-alert-info pt-2 pb-2">
            <div class="d-flex align-items-center align-items-center">
                <span class="me-3 user-select-none">
                    <Icon IconName="info" Width="40" Height="40" Color="var(--angor-primary)"/>
                </span>
                <span class="text-white">No projects found.</span>
            </div>
        </div>
    </div>
}

@if (founderProjects.Count > 0)
{
    <div class="row row-cols-1 row-cols-sm-1 row-cols-md-2 row-cols-lg-3 project-wrapper" data-cy="project-grid">
        @foreach (var project in founderProjects)
        {
            <FounderProjectItem FounderProject="@project"></FounderProjectItem>
        }
    </div>
}

<div class="row">
    <div class="col">
        <div class="d-flex justify-content-center mt-4">
            <button class="btn btn-border my-3" @onclick="LookupProjectKeysOnIndexerAsync">
                <i class="@(scanningForProjects ? "rotate-icon" : "")">
                    <Icon IconName="refresh"></Icon>
                </i>
                <span class="nav-link-text ms-1">@(founderProjects.Count == 0 ? "Scan for founder projects" : "Rescan founder projects")</span>
            </button>
        </div>
    </div>
</div>

@code {
    private string founderKey;
    private string projectId;
    private List<FounderProject> founderProjects = new();
    private bool hasWallet;
    bool scanningForProjects;

    private NotificationComponent notificationComponent;


    protected override async Task OnInitializedAsync()
    {
        hasWallet = _walletStorage.HasWallet();

        if (hasWallet)
        {
            founderProjects = storage.GetFounderProjects().Where(_ => !string.IsNullOrEmpty(_.CreationTransactionId)).ToList();
            await ScanForNewInvestmentsAsync();
        }
    }

    private async Task LookupProjectKeysOnIndexerAsync()
    {
        scanningForProjects = true;

        var keys = _walletStorage.GetFounderKeys();
        var founderProjectsToLookup = new Dictionary<string, ProjectIndexerData>();

        foreach (var key in keys.Keys)
        {
            if (founderProjects.Any(_ => _.ProjectInfo.ProjectIdentifier == key.ProjectIdentifier))
                continue;

            var indexerProject = await _IndexerService.GetProjectByIdAsync(key.ProjectIdentifier);

            if (indexerProject != null) // TODO: Support projects with gaps
                founderProjectsToLookup.Add(key.NostrPubKey, indexerProject);
        }

        if (!founderProjectsToLookup.Any())
        {
            scanningForProjects = false;
            return;
        }

        RelayService.RequestProjectCreateEventsByPubKey(
            e =>
            {
                // Run the async logic in a fire-and-forget task
                _ = Task.Run(async () =>
                {
                    switch (e)
                    {
                        case { Kind: NostrKind.Metadata }:
                            var nostrMetadata = serializer.Deserialize<ProjectMetadata>(e.Content);
                            var existingProject = founderProjects.FirstOrDefault(_ => _.ProjectInfo.NostrPubKey == e.Pubkey);

                            if (existingProject != null)
                            {
                                existingProject.Metadata ??= nostrMetadata;
                            }
                            else
                            {
                                var founderProject = CreateFounderProject(founderProjectsToLookup, e);
                                founderProject.Metadata = nostrMetadata;

                                // Initialize stats for the new project
                                founderProject.Stats = await _IndexerService.GetProjectStatsAsync(founderProject.ProjectInfo.ProjectIdentifier) ?? new ProjectStats();

                                founderProjects.Add(founderProject);
                            }

                            break;

                        case { Kind: NostrKind.ApplicationSpecificData }:
                            if (e.Id != founderProjectsToLookup[e.Pubkey].NostrEventId)
                                return;

                            var projectInfo = serializer.Deserialize<ProjectInfo>(e.Content);
                            var project = founderProjects.FirstOrDefault(_ => _.ProjectInfo.NostrPubKey == e.Pubkey);

                            if (project != null)
                            {
                                if (!string.IsNullOrEmpty(project.ProjectInfo.ProjectIdentifier))
                                    return;

                                project.ProjectInfo = projectInfo;

                                // Update stats for the existing project
                                project.Stats = await _IndexerService.GetProjectStatsAsync(project.ProjectInfo.ProjectIdentifier) ?? new ProjectStats();
                            }
                            else
                            {
                                project = CreateFounderProject(founderProjectsToLookup, e, projectInfo);

                                // Initialize stats for the new project
                                project.Stats = await _IndexerService.GetProjectStatsAsync(project.ProjectInfo.ProjectIdentifier) ?? new ProjectStats();

                                founderProjects.Add(project);
                            }

                            break;
                    }
                });
            },
            () =>
            {
                scanningForProjects = false;

                // Merge or update projects in storage
                foreach (var project in founderProjects)
                {
                    var existing = storage.GetFounderProjects().FirstOrDefault(p => p.ProjectInfo.ProjectIdentifier == project.ProjectInfo.ProjectIdentifier);
                    if (existing == null)
                    {
                        storage.AddFounderProject(new[] { project });
                    }
                    else
                    {
                        storage.UpdateFounderProject(project);
                    }
                }

                StateHasChanged();
            },
            founderProjectsToLookup.Keys.ToArray());
    }


    private FounderProject CreateFounderProject(Dictionary<string, ProjectIndexerData> founderProjectsToLookup,
        NostrEvent e, ProjectInfo? projectInfo = null)
    {
        var keys = _walletStorage.GetFounderKeys();
        var projectIndex = keys.Keys.First(x => x.NostrPubKey == e.Pubkey).Index; //we throw if not found
        var trxId = founderProjectsToLookup[e.Pubkey].TrxId;

        return new FounderProject
        {
            ProjectInfo = projectInfo ?? new ProjectInfo { NostrPubKey = e.Pubkey },
            ProjectIndex = projectIndex,
            CreationTransactionId = trxId,
            NostrProfileCreated = true,
            ProjectInfoEventId = founderProjectsToLookup[e.Pubkey].NostrEventId
        };
    }

    private async Task NavigateToCreateProject()
    {
        // perform a rescan before creating a project (to update the keys)
        await LookupProjectKeysOnIndexerAsync();

        NavigationManager.NavigateTo("/create");
    }

    private string GetCreateButtonTooltip()
    {
        if (founderProjects.Count >= 15)
            return "You have reached the maximum number of projects. Please manage your existing projects.";
        if (scanningForProjects)
            return "Scanning in progress...";
        return "Create a new project.";
    }

    private async Task ScanForNewInvestmentsAsync()
    {
        try
        {
            foreach (var project in founderProjects)
            {
                if (project?.ProjectInfo == null)
                    continue;

                // Fetch current stats from the IndexerService
                var currentStats = await _IndexerService.GetProjectStatsAsync(project.ProjectInfo.ProjectIdentifier);

                if (currentStats == null)
                    continue;

                // Check for new investments
                if (currentStats.InvestorCount > project.Stats.InvestorCount ||
                    currentStats.AmountInvested > project.Stats.AmountInvested)
                {
                    // Update project stats
                    project.Stats.InvestorCount = (int)currentStats.InvestorCount;
                    project.Stats.AmountInvested = currentStats.AmountInvested;

                    // Notify the founder
                    notificationComponent.ShowNotificationMessage(
                        $"New investment detected in project '{project.ProjectInfo.ProjectIdentifier}': {currentStats.InvestorCount} investors, {Money.Satoshis(currentStats.AmountInvested).ToUnit(MoneyUnit.BTC)} BTC raised.", 5);

                    // Save updated project to storage
                    storage.UpdateFounderProject(project);
                }
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error scanning for investments: {ex.Message}");
        }
    }


}